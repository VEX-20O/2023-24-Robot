{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nlimit LimitSwitchA = limit(Brain.ThreeWirePort.A);\ndigital_out piston = digital_out(Brain.ThreeWirePort.B);\nmotor LeftMotorA = motor(PORT1, ratio6_1, false);\n\nmotor LeftMotorB = motor(PORT2, ratio6_1, true);\n\nmotor RightMotorA = motor(PORT3, ratio6_1, false);\n\nmotor RightMotorB = motor(PORT4, ratio6_1, true);\n\nmotor mainIntakeMotor = motor(PORT5, ratio6_1, false);\n\nmotor flipIntakeMotor = motor(PORT6, ratio6_1, true);\n\nmotor cata = motor(PORT19, ratio36_1, true);\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       Tyler Vaughn                                                  */\n/*    Created:      06/01/2023                                                    */\n/*    Description:  V1 of Robot                                               */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n \nint main() {\n  // drivin\n  //@@@@@@\n  while(true) {\n    /*\n    LeftMotorA.spin(directionType::fwd, Controller1.Axis3.value(), velocityUnits::pct);\n    LeftMotorB.spin(directionType::fwd, Controller1.Axis3.value(), velocityUnits::pct);\n    RightMotorA.spin(directionType::fwd, Controller1.Axis2.value(), velocityUnits::pct);\n    RightMotorB.spin(directionType::fwd, Controller1.Axis2.value(), velocityUnits::pct);\n    //@@@@@@\n    */\n    /*\n    if(Controller1.Axis3.position() > 5){\n    LeftMotorA.spin(forward, 100, volt);\n    LeftMotorB.spin(forward, 100, volt);\n    RightMotorA.spin(forward, 100, volt);\n    RightMotorB.spin(forward, 100, volt);\n    }else if(Controller1.Axis3.position() < -5){\n    LeftMotorA.spin(forward, -100, volt);\n    LeftMotorB.spin(forward, -100, volt);\n    RightMotorA.spin(forward, -100, volt);\n    RightMotorB.spin(forward, -100, volt);\n    }else if(Controller1.Axis1.position() < -5){\n    LeftMotorA.spin(forward, -100, volt);\n    LeftMotorB.spin(forward, -100, volt);\n    RightMotorA.spin(forward, 100, volt);\n    RightMotorB.spin(forward, 100, volt);\n    }else if(Controller1.Axis1.position() > 5){\n    LeftMotorA.spin(forward, 100, volt);\n    LeftMotorB.spin(forward, 100, volt);\n    RightMotorA.spin(forward, -100, volt);\n    RightMotorB.spin(forward, -100, volt);\n    }else{\n      LeftMotorA.stop();\n    LeftMotorB.stop();\n    RightMotorA.stop();\n    RightMotorB.stop();\n    }\n    */\n    if(abs(Controller1.Axis1.position()) > 5 || abs(Controller1.Axis3.position()) > 5){\n      LeftMotorA.spin(forward, Controller1.Axis1.position() + Controller1.Axis3.position(), percent);\n      LeftMotorB.spin(forward, Controller1.Axis1.position() + Controller1.Axis3.position(), percent);\n       RightMotorA.spin(forward, Controller1.Axis1.position() -  Controller1.Axis3.position(), percent);\n      RightMotorB.spin(forward, Controller1.Axis1.position() - Controller1.Axis3.position(), percent);\n    }\n    else {\n      LeftMotorA.stop();\n    LeftMotorB.stop();\n    RightMotorA.stop();\n    RightMotorB.stop();\n    }\n\n\n\n\n\n    //main intake\n    //$$$$$$\n    if (Controller1.ButtonR2.pressing()){\n      mainIntakeMotor.setVelocity(100,percent);\n      mainIntakeMotor.spin(forward);\n    }else if(Controller1.ButtonL2.pressing()){\n      mainIntakeMotor.setVelocity(100,percent);\n      mainIntakeMotor.spin(reverse);\n    }else{\n      mainIntakeMotor.stop();\n    }\n    //$$$$$$\n\n      // cata fire and reset\n      //%%%%%\n      /*\n    if (Controller1.ButtonL1.pressing()) {\n      catapultMotor.spinFor(forward,90,degrees);\n     while(!LimitSwitchA.pressing()){\n      catapultMotor.spin(forward);\n     }\n     catapultMotor.stop();\n    } else {\n      catapultMotor.stop();\n    }\n   //%%%%%\n*/\n    //flipdown Intake controls\n    //*****\n    if (Controller1.ButtonR1.pressing()) {\n      flipIntakeMotor.setVelocity(100,percent);\n      flipIntakeMotor.spin(forward);\n      piston.set(true);\n      \n    }else if(Controller1.ButtonA.pressing()){\n      flipIntakeMotor.setVelocity(100, percent);\n      flipIntakeMotor.spin(reverse);\n    } else {\n      flipIntakeMotor.stop();\n      piston.set(false);\n     \n    }\n    //******\n    if(Controller1.ButtonL1.pressing()){\n      cata.spin(forward,13, volt);\n    }\n    else {\n      cata.stop(brake);\n    }\n    vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources.\n  }\n}","textLanguage":"cpp","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}